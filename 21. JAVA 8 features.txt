#JAVA 8 Features:
    - Functional Interface.
    - Default keyword.
    - Lambdas expression.
    - Optional class.
    - Stream API.       

Note: In versions 8 complete 'main method' is allowed in interface, but incomplete 'static method' is not allowed in interface(Even in version 7 'incomplete static method' is 'not' allowed):
    - Ex:
        package p1;
        public interface A{
            public static void main (String[] args){
                //No Error
            } 
            
            public static void test(); //Error: Incomplete static method is not allowed  
            
        }


-------------------------------------------------------------------------------------------
#Functional Interface.
    - It was introduced in JAVA 8 version
    - It is implemented to an interface using the annotation '@FunctionalInterface'. 
    - A functional interface should consist of exactly one 'incomplete method'(abstract method) in it.
        EX1: 
            package p1;
            @FunctionalInterface
            public interface A{
                //Error: no 'abstract method'.
            }  

        EX2: 
            package p1;
            @FunctionalInterface
            public interface A{
                public void test1();
                public void test2(); //Error: more than one 'abstract method'.
            }  

        EX3(perfect): 
            package p1;
            @FunctionalInterface
            public interface A{
                public void test1(); //no-error
            }  


    - Q. Can we do multiple inheritance on functional interface?
        - No, since 'functional interface' allows only one abstract class.
        - EX: 
            package p1;
            @FunctionalInterface
            public interface A{
                public void test1(); 
            }  

            package p1;
            @FunctionalInterface
            public interface B{
                public void test2(); 
            }  

            package p1;
            @FunctionalInterface
            public interface C extends A,B{ //Error
            
            }  
        
        - But, we can do multiple inheritance bw functional interface to normal interface:
        - EX: 
            package p1;
            @FunctionalInterface
            public interface A{  //'A' is a functional interface.
                public void test1(); 
            }  

            package p1;
            @FunctionalInterface
            public interface B{  //'B' is a functional interface.
                public void test2(); 
            }  

            package p1;
            public interface C extends A,B{  //'C' is a normal interface.
                // no-error
            }               


-------------------------------------------------------------------------------------------
#Default keyword.
    - 'default' keyword was introduced in version 8 of java.
    - Using 'default' keyword we can create complete methods inside interface.   
        - Ex: 
            package p1;
            public interface A{
                default void test(){  //Creating complete methods inside interface with 'default'
                    S.o.p(100);
                }
            }    

            package p1;
            public class B implements A{
                psvm(){
                    B b1 = new B();
                    b1.test();  
                }
            }    

    - Inside 'functional interface' 'incomplete method' should be 'one',  but we can have multiple 'default methods'.
        - Ex: 
            package p1;
            @FunctionalInterface
            public interface A{
                public void test1(); //Abstract method 
   
                default void test2(){  //Creating complete methods inside interface with 'default'
                    S.o.p(100);
                }

                default void test3(){  //We can create multiple default methods
                    S.o.p(100);
                }
            }    

            package p1;
            public class B implements A{
                @Override
                public void test1() {
                    S.o.p('From test1')
                }

                psvm(){
                    B b1 = new B();
                    b1.test();  
                }
            }    


-------------------------------------------------------------------------------------------
#Lambdas expression.
    - It was introduced in version 8 of java.
    - It reduces the number of code.
    - Functional programming can be implemented with 'lambdas expression'. 
    - It is only applicable if if the 'parents class interface' has only one abstract method, ie. parent interface should be 'functional interface'.  
    - Ex1: 
        package p1;
        public interface A{
            public void test();

            public void test1(); //Error: since multiple incomplete methods 
        }

        package p1;
        public class B{
            psvm(){
                // overwrites the method in 'interface A'
                A a1 = () -> {
                    S.o.p(100);
                };
                S.o.p(a1);  // address of 'class B' 
                a1.test();  //100 
            }
        }


    - Ex2: 
        package p1;
        @FunctionalInterface  
        public interface A{
            public void test(int x);
        }

        package p1;
        public class B{
            psvm(){
                A a1 = (int x) -> {
                    S.o.p("From test method");
                    S.o.p(x);
                };
                a1.test(500);  
            }
        }

    - Ex3: 
        package p1;
        @FunctionalInterface  
        public interface A{
            public void test(int x, int y);
            
            default void test1(){
                S.o.p(3000);
            } 
        }

        package p1;
        public class B{
            psvm(){
                A a1 = (int a, int b) -> {
                    S.o.p(a);
                    S.o.p(b);
                };
                a1.test(500, 600);  
                a1.test1();  
            }
        }


    - Ex4 (We can remove curly-brackets in lambdas expression is there is only a single code): 
        package p1;
        @FunctionalInterface  
        public interface A{
            public void test();
        }

        package p1;
        public class B{
            psvm(){
            
                A a1 = () -> S.o.p(100); //one line of code with curly-braces.
            
            }
        }
    

    - Ex5 (Math Operations):
        package p1;
        @FunctionalInterface  
        public interface MathOperation{
            int operate(int a, int b);
        }

        package p1;
        public class B{
            psvm(){
                MathOperation op1 = (int a, int b) -> return a+b; 
                int val1 = op1.operate(10, 20);
                S.o.p(val1);  //30 
                
                MathOperation op2 = (int a, int b) -> return a-b; 
                int val2 = op1.operate(10, 20);
                S.o.p(val2);  //-10 
                
                MathOperation op3 = (int a, int b) -> return a*b; 
                int val3 = op3.operate(10, 20);
                S.o.p(val3);  //200
            }
        }

-------------------------------------------------------------------------------------------
#Optional class.


-------------------------------------------------------------------------------------------
#Stream API.       


-------------------------------------------------------------------------------------------






































