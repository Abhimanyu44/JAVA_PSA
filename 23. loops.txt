

#for loops:
    Ex1:
        package p1;
        public class A{
            psvm(){
                for (int i = 0; i < 5; i++){
                    S.o.p(i);
                }
            }
        }

    Ex2 ("continue"):
        package p1;
        public class A{
            psvm(){
                for (int i = 0; i < 5; i++){
                    if(i==2){
                        continue;
                    }
                    S.o.p(i);
                }
            }
        }
    Note: When we use "continue" the it stops the loop  after "continue" and loop starts again.
    So, the output of  EX2 is like: "0 1 3 4"  


    Ex2 (labeled break):
        package p1;
        public class A{
            psvm(){
                for (int i = 0; i < 5; i++){
                    x:if(i==2){
                        break x;
                    }
                    S.o.p(i);
                }
            }
        }



-----------------------------------------------------------------------------------------
#while loops:
    Ex1:
        package p1;
        public class A{
            psvm(){
                int x = 10; 
                while(x<10){
                    S.o.p(x);
                    x++;
                }
            }
        }


-----------------------------------------------------------------------------------------
#do while loops:
    Ex1:
        package p1;
        public class A{
            psvm(){
                int x = 10; 
                do {

                } while(x<10){
                    S.o.p(x);
                    x++;
                }
            }
        }


----------------------------------------------------------------------------------------- 
#for each loops:
    Ex1:
        package p1;
        public class A{
            psvm(){
                int[] x = new int[3];
                x[0] = 10;
                x[1] = 20;
                x[2] = 30;

                //for each loop
                for (int i:x){
                    S.o.p(i);
                }
            }
        }


----------------------------------------------------------------------------------------- 



----------------------------------------------------------------------------------------- 

----------------------------------------------------------------------------------------- 

----------------------------------------------------------------------------------------- 

----------------------------------------------------------------------------------------- 

----------------------------------------------------------------------------------------- 










