# Constructor:
- Constructors are almost similar to methods except for two things -> its name is the same as the class name and it has no return type.
- Constructor should have same name as that of the class.

- Whenever object is created constructor will get called.
    Example:
        public class A {
            A(){
                System.out.println(100); //100
            }
            
            public static void main(String args[]) {
                A a1 = new A();
                A a2 = new A();
                A a3 = new A();
            }    
        }

- Constructors are internally permanently void. Hence can never return any value.
    Example:
        public class A {
            A(){
                return 100; // Error
            }
            
            public static void main(String args[]) {
            }    
        }

- Note: For a constructor if you give a return type(void, int, float etc.) then it is converted to method. It will no longer be treated as constructor.
    Example:
        public class A {
            void A(){ //now constructor will become a non-static method 
                System.out.println(100); 
            }
            
            public static void main(String args[]) {
                A a1 = new A();
                a1.A();
            }    
        }

- We can create constructor with arguments also.
    Example:
        public class A {
            A(int x){
                System.out.println(x);
            }

            public static void main(String args[]) {
                A a1 = new A(1000);
            }
        } 

- Constructor over loading?
    - Here we create more than one constructor in same class provided they have 'different number of arguments' or 'different types of arguments'.
    - Example1:
        public class A {
            A(){ //no of args=0
                System.out.println(10);
            }
            A(int x){ //no of args=1
                System.out.println(x);
            }
            A(int x, int y){ //no of args=2
                System.out.println(x);
                System.out.println(y);
            }

            public static void main(String args[]) {
                A a1 = new A();
                A a2 = new A(20);
                A a3 = new A(100, 200);
            }
        } 

    - Example2:
        public class A {
            A(int x){ //no of args=1, type=int
                System.out.println(x);
            }
            A(char x){ //no of args=1, type=char 
                System.out.println(x);
            }
            A(double x){ //no of args=1, type=double
                System.out.println(x);
            }

            public static void main(String args[]) {
                A a1 = new A(10);
                A a2 = new A('t');
                A a3 = new A(15.5);
            }
        } 



-----------------------------------------------------------------------------------------------------
#Code run flow in java.

- In java when we write a program and save the file, it gets saved as 'className.java'. Now when we run this file its gets compiled by 'JDK(Java Development Kit) compile' into 'byte code' and a 'className.class' file is created. Then this 'className.class' is converted to 'signals' form 'binary code' by 'JRE(Java Runtime Environment)' and hence we get the output.

- JDK:
    - JDK helps us to compile .java files to .class files.

- JRE:
    - JRE is a runtime environment helps us to run '.class files'.

- [java program (A.java)] --(JDK compiler)--> [Byte code (A.class)] --(JRE Signal)--> [output]

- public class A {
    psvm(){
        A a1 = new A();       ------------>   ...01011001011...     ---------------> o/p signal.      
    }
  }



--------------------------------------------------------------------------------------------------
# Default Constructor:
- Note: Whenever we create object it is mandatory to call constructor or else we will get an error.
- If we do not add a constructor in '.java file', then during the compilation automatically 'empty body with no args constructor' will be added to '.class file':
    - Example:
        A.java                    ------------>               A.class file
        
        public class A{                                             public class A{
            psvm(){                     -------->                       A(){                
                A a1 = new A();                                         }
            }                                                           psvm(){ 
        }                                                                   A a1 = new A();
                                                                    }    
- Note: Default constructor is not applicable for objects with arguments. 
    Examples:
        public class A{
            psvm(){
                A a1 = new A(100); //Error
            }
        }

- Note: If in the same program objects with and without arguments is created then default constructor is not applicable.  
    Example:
        public class A{
            A(int x){

            }
            psvm (){
                A a1 = new A(); //Error
                A a2 = new A(100);
                
            }
        }



