#Polymorphism (Overriding & Overloading):
    - "Poly" + "morphism" ---> many + forms 
    - Anything that can take more than one form is called "Polymorphism".
    
    - Here we develop a feature such that it can take more than one form depending on the situation. 
    - Polymorphism is applicable only on "methods" and not "variable".


--------------------------------------------------------------------------------------------------
#Types of Polymorphism:
    -> Overriding:- For "overriding" we modify the logic of inherited method.  
        note: For "overriding" inheritance is mandatory.   

        Ex1:
            package p1;
            public class A {
                public void test() {
                    System.out.println(100);
                }
            }

            package p1;
            public class B extends A{
                public void test() { //Here we are overriding the "test()" method 
                    System.out.println(200);
                }
                public static void main(String[] args) {
                    B b1 = new B();
                    b1.test(); //200

                    A a1 = new A();
                    a1.test(); //100
                    
                }
            }

        Ex2:
            package p1;
            public class A {
                public void test1() {
                    System.out.println(100);
                }

                public void test2() {
                    System.out.println(200);
                }
            }

            package p1;
            public class B extends A{
                public void test1() { //Here we are overriding the "test1()" method 
                    System.out.println(300);
                }
                public static void main(String[] args) {
                    B b1 = new B();
                    b1.test1(); //300
                    b1.test2(); //200
                }
            }

        - '@Override' annotation checks weather overriding is happening or not. 
            Ex1:
                package p1;
                public class A {
                    public void test1() {
                        System.out.println(100);
                    }

                    public void test2() {
                        System.out.println(200);
                    }
                }

                package p1;
                public class B extends A{
                    @Override //checks if overriding is taking place or not.
                    public void test1() {  
                        System.out.println(300);
                    }
                    public static void main(String[] args) {
                        B b1 = new B();
                        b1.test1(); //300
                        b1.test2(); //200
                    }
                }    

            Ex2:
                package p1;
                public class GoldAccount {
                    public void onlineBanking() {
                        System.out.println("Yes");
                    }

                    public void rateOfInterest() {
                        System.out.println("Nil");
                    }
                }

                package p1;
                public class PlatinumAccount extends GoldAccount{
                    @Override //checks if overriding is taking place or not.
                    public void rateOfInterest() {  
                        System.out.println("6% PA");
                    }

                    public static void main(String[] args) {
                        GoldAccount gold = new GoldAccount();
                        gold.onlineBanking(); //Yes
                        gold.rateOfInterest(); //nil
                        
                        PlatinumAccount platinum = new PlatinumAccount();
                        platinum.onlineBanking(); //Yes
                        platinum.rateOfInterest(); //6% PA
                    }
                }
        
        - Note: During overriding we can increase the scope of method & override in child class but we cannot reduce the scope of method in child class during overriding.
            Ex1:
                package p1;
                public class A{
                    public void test(){
                    }
                }

                package p1;
                public class B extends A{
                    @Override
                    void test(){ //Error since we are reducing the scope from "public" to "default"
                    }
                }

            Ex2:
                package p1;
                public class A{
                    void test(){
                    }
                }

                package p1;
                public class B extends A{
                    @Override
                    public void test(){ //no error as we are increasing from "default" to "public"
                    }
                }

            Ex3(private method cannot be inherited):
                package p1;
                public class A{
                    private void test(){
                    }
                }

                package p1;
                public class B extends A{
                    @Override
                    public void test(){ //Error
                    }
                }

        - Note: We cannot inherit 'static methods' hence we cannot override 'static methods'.
            EX1:
                package p1;
                public class A{
                    public static void test(){
                    }
                }  

                package p1;
                public class B extends A{
                    @Override
                    public static void test(){ // Error
                    }
                }  
    
    --------------------------------------------------------------------------------------
    -> Overloading:- Here we develope more than one method with same name in same class provided they have different number of arguments or diff type of arguments.
        
        EX1:
            public class A{
                public void test() { //noOfArgs = 0
                  Sop(100);  
                }

                public void test(int x) { //noOfArgs = 1
                  Sop(x);  
                }

                psvm(){
                    A a1 = new A();
                    a1.test();
                    a1.test(200);
                }

            } 

        EX2:
            public class A{
                public static void main(String args[]){
                    Sop(100); // 100
                    A.main(); // 200
                }
                public static void main(){
                    Sop(200);
                }
            } 











