# Inheritance: 
    - Here we inherit the members of 'parent class' to 'child class' so that we can re-use that in child class. 
    - Example1:
        public class A { //Parent class
            int x =  10;
        } 


        public class B extends A{ //Child class
            psvm(){
                B b1 = new B();
                S.o.p(b1.x); //10
            }
        }


    - Example2:
        public class A { //Parent class
            int x =  10;
            public void test(){
                A a1 = new A();
                S.o.p(1000);
            }
        } 


        public class B extends A{ //Child class
            psvm(){
                B b1 = new B();
                S.o.p(b1.x); //10
            }
        }


-------------------------------------------------------------------------------------------
# Multi Level Inheritance:
    - Here we inherit the members of 'parent class' to 'child class' for 2 or more times, so that we can re-use that in child classes.
    - Example1:
        public class A { //Parent class
            public void test1(){
                S.o.p(1000);
            }
        } 


        public class B extends A{ //Child class
            public void test2(){
                S.o.p(2000); 
            }
        }    
 
        public class C extends B{ //Child class
            public void test3(){
                S.o.p(3000); 
            }

            psvm(){
                C c1 = new C();
                c1.test1();
                c1.test2();
                c1.test3();
            }
        }    



-------------------------------------------------------------------------------------------
# Multiple Inheritance:
    - JAVA does not support multiple inheritance at class level but interface support multiple inheritance.
    - Note: 
        - Multiple inheritance leads to 'diamond problem' at class level.
        - "Diamond Problem": It is a common issue that can arise in programming languages that support multiple inheritance, where a class inherits from two or more classes that have a common base class. This problem is often encountered in object-oriented languages like C++.
             A
            / \
           B   C
            \ /
             D      
        - Here, classes B and C both inherit from class A, and class D inherits from both B and C. This creates an ambiguity when trying to access a member or method that is inherited from A through class D. The ambiguity arises because class D has two paths to class A, one through B and the other through C.
    
    -  


-------------------------------------------------------------------------------------------
# Non sub classes:
    - When there is no inheritance between 2 or more classes these classes are called "non-subclasses".
    - Example1:
        public class A{
            int x = 10; 
        }

        public class B{
            psvm(){
                A a1 = new A();
                S.o.p(a1.x); //10
            }
        }

# Sub classes:
    - When there is inheritance between 2 or more classes these classes are called "subclasses".


-------------------------------------------------------------------------------------------
#Inheritance bw class and interface:
    - From "interface" to "class"  ----> we use 'implements' keyword.
    - From "class" to "class"  ----> we use 'extends' keyword.
    - From "interface" to "interface"  ----> we use 'extends' keyword.

    - Ex1(Inheritance bw class & interface): 
        package p1;
        public interface A {
            public void test();
        } 

        package p1;
        public class B implements A{   //Inheriting 'interface A' to 'class B' using 'implements'. 
            @Override                  //Here '@Override' is used to check if overriding is taking place or not.  
            public void test(){
                S.o.p(100);
            }
        } 



-------------------------------------------------------------------------------------------
#Note:
    - We cannot inherit 'static methods'.
        EX1:
            package p1;
            public class A{
                public static void test(){
                }
            }  

            package p1;
            public class B extends A{
                @Override
                public static void test(){ // Error
                }
            }  
        
        EX2 (In bellow prog during compilation 'B.test()' is converted to 'A.test()' and hence no error):
            package p1;
            public class A{
                public static void test(){
                    Sop(100);
                }
            }  

            package p1;
            public class B extends A{
                psvm(){
                    B.test(); //100, since 'B.test()' gets converted to 'A.test()' 
                }
            }  


-------------------------------------------------------------------------------------------
#Note: 
    - Inheritance bw 'class', 'interface' and 'another class' can be done together.
    - Use 'extends' before 'implements' when using them together, else we will get an error.
    - Ex:
        package p1;
        public class A{
            public void test1() {
                S.o.p(100);
            }
        }

        package p1;
        public interface B{
            public int test2(int a); 
        }

        package p1;
        public class C extends A implements B {  //always use 'extends' before 'implements'
            @Override
            public int test2(int a) {                
                return a;
            }

            psvm(){
                C c1 = new C();
                c1.test1();
                int val = c1.test2(200);
                S.o.p(val);
            } 
        }


-------------------------------------------------------------------------------------------
Q. Can we do multiple inheritance on functional interface?
    - No, since 'functional interface' allows only one abstract class.
    - EX: 
        package p1;
        @FunctionalInterface
        public interface A{
            public void test1(); 
        }  

        package p1;
        @FunctionalInterface
        public interface B{
            public void test2(); 
        }  

        package p1;
        @FunctionalInterface
        public interface C extends A,B{ //Error
        
        }  
    
    - But, we can do multiple inheritance bw 'functional interface' to 'normal interface':
    - EX: 
        package p1;
        @FunctionalInterface
        public interface A{  //'A' is a functional interface.
            public void test1(); 
        }  

        package p1;
        @FunctionalInterface
        public interface B{  //'B' is a functional interface.
            public void test2(); 
        }  

        package p1;
        public interface C extends A,B{  //'C' is a normal interface.
            // no-error
        }               



-------------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------------

































