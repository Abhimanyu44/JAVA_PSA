# File-System:
    -> File
    -> FileReader
    -> FileWriter
    -> BufferReader
    -> BufferWriter
    -> FileInputStream
    -> FileOutputStream

-----------------------------------------------------------------------------------------
# File:
    - First create a file "A.txt" in the project directory.
    - It returns the path of file.
    - Ex: 
        package p1;
        import java.io.File;
        public class A {
            public static void main(String[] args) {
                File f = new File("H:\\JAVA_PSA\\A.txt");  //This is an ex path to a txt file
                S.o.p(f);  //H:\JAVA_PSA\A.txt 
            }
        }


# exists() Method :
    - This method is a non-static method present inside File class. 
    - Using this method we can check if the file is present in the given path or not.
    - It returns a boolean value.
    - Ex:
        package p1;
        import java.io.File;
        public class A {
            public static void main(String[] args) {
                File f = new File("H:\\JAVA_PSA\\A.txt");
                boolean check = f.exists();
                S.o.p(check);   
            }
        }


# delete() Method :
    - This method is a non-static method present inside File class. 
    - Using this method we can delete the file in the given path.
    - It returns a boolean value.
    - If the file is deleted, it will return true else false.
    - Ex:
        package p1;
        import java.io.File;
        public class A {
            public static void main(String[] args) {
                File f = new File("H:\\JAVA_PSA\\A.txt");
                boolean check = f.delete();
                S.o.p(check);   
            }
        }


#Note: 
    - "Checked Exceptions" should be handled regardless of exception(mean weather exception occurs or not it should be handled with a try/catch)  
    - In Filesystem we have to deal with "checked exceptions".


# createNewFile() Method:
    - It is a non-static method to present in the File class.
    - This method helps us to create file in given path.
    - It returns a boolean value.
    - If unable to create file it will return false, else true. 
    -Ex:
        package p1;
        import java.io.File;
        import java.io.IOException;

        public class A {
            public static void main(String[] args) {
                try {
                    File f = new File("H:\\JAVA_PSA\\A.txt");
                    boolean check = f.createNewFile();
                    S.o.p(check);   
                }catch (IOException e) {
                    e.printStackTrace();
                }
                
            }
        }


# length() Method:
    - It is a non-static method to present in the File class.
    - This method helps us to read number of characters including white spaces.
    - It returns a 'long value'.
    
    -Ex:
        package p1;
        import java.io.File;

        public class A {
            public static void main(String[] args) {
                try {
                    File f = new File("H:\\JAVA_PSA\\A.txt");
                    long val = f.length();
                    S.o.p(val);   
                }catch (Exception e) {
                    e.printStackTrace();
                }
                
            }
        }


# mkdir() Method:
    - It is a non-static method to present in the File class.
    - This method helps us to create a folder in the given path.
    - If we run the program multiple times for same folder, in the same path, the method will not rewrite the existing folder.
    - It returns a 'boolean value'.
    
    -Ex:
        package p1;
        import java.io.File;

        public class A {
            public static void main(String[] args) {
                try {
                    File f = new File("H:\\JAVA_PSA\\test1");
                    boolean check = f.mkdir();
                    S.o.p(check);   
                }catch (Exception e) {
                    e.printStackTrace();
                }
                
            }
        }


# list() Method:
    - It is a non-static method to present in the File class.
    - This method helps us to get all files and folders names in the given path.
    - It returns an 'Array value'.
    -Ex:
        package p1;
        import java.io.File;

        public class A {
            public static void main(String[] args) {
                try {
                    File f = new File("H:\\JAVA_PSA\\");
                    String[] val = f.list();
                    
                    for(String items: val){  //printing all files and folders using a forEach
                        S.o.p(items);
                    }   
                }catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }


-----------------------------------------------------------------------------------------
#FileReader:
    - It is a non-static method to present in the FileReader class.
    - This method helps us to read the content of a text file.
    
    -Ex1:
        package p1;
        import java.io.FileReader;
        import java.io.File;

        public class A {
            public static void main(String[] args) {
                try {
                    File f = new File("H:\\JAVA_PSA\\A.txt");
                    FileReader fr = new FileReader(f);
                    
                    for(int i = 0; i <f.length; i++) {
                        S.o.p((char)fr.read());
                    }
                }catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }


    -Ex2:
        package p1;
        import java.io.FileReader;
        import java.io.File;

        public class A {
            public static void main(String[] args) {
                try {
                    File f = new File("H:\\JAVA_PSA\\A.txt");
                    FileReader fr = new FileReader(f);
                    
                    Char[] ch = new Char[(int)f.length()] 
                    
                    fr.read(ch);  //Adding all characters to 'ch' variable   
                    for(Char c: ch) {
                        S.o.p(c);
                    }
                }catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }


-----------------------------------------------------------------------------------------
#FileWriter:
    - It is a non-static method to present in the FileReader class.
    - This method helps us to write content to a text file.
    - It will create a new file if the file does not exist.
    - By default 'FileWriter' overwrites the existing file.
    - So if we don't want to overwrites, we use 'true' to append the content.

    - Ex1 (default FileWriter):
        package p1;
        import java.io.FileWriter;
        import java.io.File;

        public class A {
            public static void main(String[] args) {
                try {
                    File f = new File("H:\\JAVA_PSA\\B.txt");
                    FileWriter fr = new FileWriter(f);
                                    
                }catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

    - Ex2(Append content with FileWriter):
        package p1;
        import java.io.FileWriter;
        import java.io.File;

        public class A {
            public static void main(String[] args) {
                try {
                    File f = new File("H:\\JAVA_PSA\\B.txt");
                    FileWriter fw = new FileWriter(f, true);  //appending the new content.
                    
                    fw.write("\n");  //write to the next-line
                    fw.write("mike");
                    fw.close();      //Save then close file
                }catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

    - Ex3:
        package p1;
        import java.io.FileWriter;
        import java.io.File;

        public class A {
            public static void main(String[] args) {
                try {
                    File f = new File("H:\\JAVA_PSA\\B.txt");
                    FileWriter fw = new FileWriter(f);
                    
                    Char[] ch = {'a', 'b', 'c', 'd', 'e'};
                    fw.write(ch);  //abcde
                    fw.close();
                }catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

    - Ex3(using 'flush()' method will assure that no content is stuck in the stream):
        package p1;
        import java.io.FileWriter;
        import java.io.File;

        public class A {
            public static void main(String[] args) {
                try {
                    File f = new File("H:\\JAVA_PSA\\B.txt");
                    FileWriter fw = new FileWriter(f);
                    
                    Char[] ch = {'a', 'b', 'c', 'd', 'e'};
                    fw.write(ch);  //abcde
                    fw.flush();   //flush the stream
                    fw.close();
                }catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }



-----------------------------------------------------------------------------------------
#Notes: Serialization and deserialization
    - Check 'Serialization and deserialization.txt' file

    
-----------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------


















